import asyncio
import time, datetime
from os import (listdir, remove)
from os.path import (isfile, join)

from django.conf import settings
from django.db import IntegrityError

from pandas import (read_csv, to_datetime, read_pickle, concat, \
    DataFrame, date_range)
from numpy import (where, sum)

from .tasks import (adjustment_bureau, get_commission, clean_folder, \
    error_email, file_cleaner)
from .models import (Indicators, Systems, Symbols)


async def symbol_cleaner(symbol, broker):
    try:
        s = Symbols.objects.filter(symbol=symbol, broker__title=broker).delete()
        #print("Removed failing symbol from db.")
    except Exception as e:
        print("At symbol cleaner {}\n".format(e))


async def make_initial_file(path_to, filename):
    try:
        #if "DATA_MODEL" in str(filename.filename):
        #spl = str(filename.filename).split('_')
        spl = str(filename).split('_')
        broker = spl[2]
        symbol = spl[3]
        period = spl[4].split('.')[0]

        df = read_csv(filepath_or_buffer=join(path_to, filename), sep=',', \
            delimiter=None, header=0, names=None, index_col=0, usecols=None, \
            squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, \
            engine=None, converters=None, true_values=None, false_values=None, \
            skipinitialspace=False, skiprows=None, nrows=None, \
            na_values=None, keep_default_na=True, na_filter=True, \
            verbose=False, skip_blank_lines=True, parse_dates=False, \
            infer_datetime_format=False, keep_date_col=False, \
            date_parser=None, dayfirst=False, iterator=False, chunksize=None, \
            compression='infer', thousands=None, decimal='.', lineterminator=None, \
            quotechar='"', quoting=0, escapechar=None, comment=None, \
            encoding=None, dialect=None, tupleize_cols=False, \
            error_bad_lines=True, warn_bad_lines=True, skipfooter=0, \
            skip_footer=0, doublequote=True, delim_whitespace=False, \
            as_recarray=False, compact_ints=False, use_unsigned=False, \
            low_memory=False, buffer_lines=None, memory_map=False, \
            float_precision=None)

        #make index
        df.sort_index(axis=0, ascending=True, inplace=True)
        df.index = to_datetime(df.index).to_pydatetime()
        df.index.name = "DATE_TIME"

        #make some returns
        if symbol == 'VXX':
            d = df['CLOSE'].diff()
            d_pct = df['CLOSE'].pct_change()
            df['tmp'] = where(d < 20.0, d, 0.0)
            df['tmp_pct'] = where(d_pct < 100.0, d_pct, 0.0)
            df['DIFF'] = df['tmp']
            df['PCT'] = df['tmp_pct']
            del df['tmp']
            del df['tmp_pct']
        else:
            df['DIFF'] = df['CLOSE'].diff()
            df['PCT'] = df['CLOSE'].pct_change()

        df['cl'] = abs(df['CLOSE'] - df['LOW'])
        df['hc'] = abs(df['HIGH'] - df['CLOSE'])

        #cleanuup
        df = df.dropna()

        out_filename = join(settings.DATA_PATH, "{0}=={1}=={2}.mp".format(broker, \
            symbol, period))
        df.to_pickle(path=out_filename)
        if settings.SHOW_DEBUG:
            print("Pickled for {0} {1}.".format(symbol, period))
    except Exception as e:
        print(e)
        out_filename = join(settings.DATA_PATH, "{0}=={1}=={2}.mp".format(broker, \
            symbol, period))
        #await symbol_cleaner(symbol=symbol, broker=broker)
        await file_cleaner(filename=out_filename)


def data_model_csv(loop):
    path_to = join(settings.DATA_PATH, 'incoming')
    filenames = [f for f in listdir(path_to) if isfile(join(path_to, f)) & ("DATA_MODEL" in f)]

    loop.run_until_complete(asyncio.gather(*[make_initial_file(path_to=path_to, \
        filename=filename) for filename in filenames], return_exceptions=True
    ))


class IndicatorBase:
    def __init__(self, name, description, per):
        self.name = name
        self.description = description
        self.per = per
        self.path_to_history = settings.DATA_PATH
        self.excluded_symbols = ['M1']

    async def create_indicator(self):
        try:
            indicator = Indicators.objects.create(title=self.name)
            indicator.save()
            print("Created indicator.")
        except IntegrityError:
            pass
        except Exception as e:
            print("At create_indicator(): {0}".format(e))
            if settings.UPDATE_DESCRIPTIONS:
                indicator = Indicators.objects.get(title=self.name)
                indicator.description=self.description
                indicator.save()
            pass

    async def starter(self):
        await self.create_indicator()

        #clean_folder(path_to='indicators')
        filenames = [f for f in listdir(self.path_to_history) if isfile(join(self.path_to_history, f))]
        #special case
        filenames += ['Ava Trade EU Ltd.==M1==43200', 'Ava Trade EU Ltd.==M1==10080', 'Ava Trade EU Ltd.==M1==1440']

        for filename in filenames:
            try:
                spl = filename.split('==')
                self.broker = spl[0]
                self.symbol = spl[1]
                self.period = spl[2].split('.')[0]

                #FIXME shit doesn't wwork, tired to think why
                #if not (self.system == any(s in self.symbol for s in self.excluded_symbols)):
                #read data
                if self.period:
                    df = read_pickle(join(self.path_to_history, filename))
                else:
                    df = None

                #make index
                #df.index = to_datetime(df.index).to_pydatetime()
            except:
                df = None
                self.period = spl[2]

            await self.indicators(df)

    async def insert(self, df):
        try:
            df = df.dropna()

            filename = join(settings.DATA_PATH, 'indicators', "{0}=={1}=={2}=={3}.mp".format(self.broker, self.symbol, self.period, self.name))
            df.to_pickle(path=filename)
            if settings.SHOW_DEBUG:
                print("Saved indicator data {} to pickle.".format(filename))
        except Exception as e:
            print(e)
            filename = join(settings.DATA_PATH, 'indicators', "{0}=={1}=={2}=={3}.mp".format(self.broker, self.symbol, self.period, self.name))
            await file_cleaner(filename=filename)

    async def clean_df(self, df):
        try:
            del df['HIGH']
            del df['LOW']
            del df['OPEN']
            del df['VOLUME']
            del df['PCT']
        except:
            pass
        return df

    async def indicators(self, df):
        try:
            if 'SMA' in self.name:
                df['VALUE'] = df['CLOSE'] - df['CLOSE'].rolling(self.per, min_periods=self.per).mean()
                df = await self.clean_df(df)
                await self.insert(df=df)
        except Exception as e:
            if settings.SHOW_DEBUG:
                print("Making indicator values {0} with {1} {2}".format(e, self.name, self.symbol))


#TODO this also requires special case for sending and svinh signals if this would appear on systems pg
#TODO probably just needs a separate class to handle *portfoloios* of symbols
async def special_case(path_to, period):
    syms = ['M1']
    broker = 'Ava Trade EU Ltd.'

    for symbol in syms:
        try:
            #symbol equal system
            df = read_pickle(join(path_to, '{0}=={1}=={2}=={3}.mp'.format(broker, symbol, period, symbol)))

            bond_commission = await get_commission('30YTBOND')
            eu_commission = await get_commission('DJEUR50')
            sp_commission = await get_commission('SP500')

            bond_margin = float(Symbols.objects.get(broker__title=broker, symbol='30YTBOND').margin_initial)
            eu_margin = float(Symbols.objects.get(broker__title=broker, symbol='DJEUR50').margin_initial)
            sp_margin = float(Symbols.objects.get(broker__title=broker, symbol='SP500').margin_initial)

            df['bond_commissions_long'] = where((df['BOND_SIDE'].shift() == 1) & (df['BOND_SIDE'].shift(2) == 0), bond_commission*2.0, 0)
            df['eu_commissions_long'] = where((df['EU_SIDE'].shift() == 1) & (df['EU_SIDE'].shift(2) == 0), eu_commission*2.0, 0)
            df['sp_commissions_long'] = where((df['SP_SIDE'].shift() == 1) & (df['SP_SIDE'].shift(2) == 0), sp_commission*2.0, 0)

            df['BOND_LONG_TRADES'] = where((df['BOND_SIDE'].shift() == 1) & (df['BOND_SIDE'].shift(2) == 0), 1, 0)
            df['EU_LONG_TRADES'] = where((df['EU_SIDE'].shift() == 1) & (df['EU_SIDE'].shift(2) == 0), 1, 0)
            df['SP_LONG_TRADES'] = where((df['SP_SIDE'].shift() == 1) & (df['SP_SIDE'].shift(2) == 0), 1, 0)

            df['BOND_LONG_PL'] = where(df['BOND_SIDE'].shift() == 1, df['BOND'] - df['bond_commissions_long'], 0)
            df['EU_LONG_PL'] = where(df['EU_SIDE'].shift() == 1, df['EU'] - df['eu_commissions_long'], 0)
            df['SP_LONG_PL'] = where(df['SP_SIDE'].shift() == 1, df['SP'] - df['sp_commissions_long'], 0)

            df['BOND_LONG_MARGIN'] = where(df['BOND_SIDE'].shift() == 1, bond_margin, 0.0)
            df['EU_LONG_MARGIN'] = where(df['EU_SIDE'].shift() == 1, eu_margin, 0.0)
            df['SP_LONG_MARGIN'] = where(df['SP_SIDE'].shift() == 1, sp_margin, 0.0)

            del df['bond_commissions_long']
            del df['eu_commissions_long']
            del df['sp_commissions_long']

            df['BOND_LONG_PL_CUMSUM'] = df['BOND_LONG_PL'].cumsum()
            df['EU_LONG_PL_CUMSUM'] = df['EU_LONG_PL'].cumsum()
            df['SP_LONG_PL_CUMSUM'] = df['SP_LONG_PL'].cumsum()

            df['bond_mae'] = await adjustment_bureau(data=df['BOND_CL'], symbol_name='30YTBOND', broker_name=broker, period_name=period)
            df['eu_mae'] = await adjustment_bureau(data=df['EU_CL'], symbol_name='DJEUR50', broker_name=broker, period_name=period)
            df['sp_mae'] = await adjustment_bureau(data=df['SP_CL'], symbol_name='SP500', broker_name=broker, period_name=period)

            df['bond_mfe'] = await adjustment_bureau(data=df['BOND_HC'], symbol_name='30YTBOND', broker_name=broker, period_name=period)
            df['eu_mfe'] = await adjustment_bureau(data=df['EU_HC'], symbol_name='DJEUR50', broker_name=broker, period_name=period)
            df['sp_mfe'] = await adjustment_bureau(data=df['SP_HC'], symbol_name='SP500', broker_name=broker, period_name=period)

            df.rename(columns={
                    'bond_mae': 'MAE',
                    'bond_mfe': 'MFE',
                    'eu_mae': 'MAE',
                    'eu_mfe': 'MFE',
                    'sp_mae': 'MAE',
                    'sp_mfe': 'MFE',
                    'BOND': 'DIFF',
                    'EU': 'DIFF',
                    'SP': 'DIFF',
                    'BOND_LONG_MARGIN': 'LONG_MARGIN',
                    'EU_LONG_MARGIN': 'LONG_MARGIN',
                    'SP_LONG_MARGIN': 'LONG_MARGIN',
                    'BOND_LONG_PL_CUMSUM': 'LONG_PL_CUMSUM',
                    'EU_LONG_PL_CUMSUM': 'LONG_PL_CUMSUM',
                    'SP_LONG_PL_CUMSUM': 'LONG_PL_CUMSUM',
                    'BOND_LONG_PL': 'LONG_PL',
                    'EU_LONG_PL': 'LONG_PL',
                    'SP_LONG_PL': 'LONG_PL',
                    'BOND_SIDE': 'LONG_SIDE',
                    'EU_SIDE': 'LONG_SIDE',
                    'SP_SIDE': 'LONG_SIDE',
                    'BOND_LONG_TRADES': 'LONG_TRADES',
                    'EU_LONG_TRADES': 'LONG_TRADES',
                    'SP_LONG_TRADES': 'LONG_TRADES',
                }, inplace=True)

            del df['BOND_CL']
            del df['BOND_HC']
            del df['EU_CL']
            del df['EU_HC']
            del df['SP_CL']
            del df['SP_HC']

            #sum portfolio trades
            tmp = sum(df.LONG_MARGIN, axis=1)
            del df['LONG_MARGIN']
            df['LONG_MARGIN'] = tmp
            tmp = sum(df.LONG_PL, axis=1)
            del df['LONG_PL']
            df['LONG_PL'] = tmp
            tmp = sum(df.LONG_PL_CUMSUM, axis=1)
            del df['LONG_PL_CUMSUM']
            df['LONG_PL_CUMSUM'] = tmp
            tmp = sum(df.LONG_TRADES, axis=1)
            del df['LONG_TRADES']
            df['LONG_TRADES'] = tmp
            tmp = sum(df.MAE, axis=1)
            del df['MAE']
            df['MAE'] = tmp
            tmp = sum(df.MFE, axis=1)
            del df['MFE']
            df['MFE'] = tmp
            tmp = sum(df.LONG_SIDE, axis=1)
            del df['LONG_SIDE']
            df['LONG_SIDE'] = tmp
            tmp = sum(df.DIFF, axis=1)
            del df['DIFF']
            df['DIFF'] = tmp

            df['mae_tmp_long'] = where(df['LONG_SIDE'].shift() == 1, df['MAE'], 0.0)
            df['mfe_tmp_long'] = where(df['LONG_SIDE'].shift() == 1, df['MFE'], 0.0)

            df['LONG_MAE'] = df['LONG_PL_CUMSUM'] - df['mae_tmp_long']
            df['LONG_MFE'] = df['LONG_PL_CUMSUM'] + df['mfe_tmp_long']

            df['LONG_DIFF_CUMSUM'] = df['DIFF'].cumsum()

            df = df.dropna()

            del df['mae_tmp_long']
            del df['mfe_tmp_long']

            out_filename = join(settings.DATA_PATH, 'performance', \
                "{0}=={1}=={2}=={3}.mp".format(broker, symbol, period, symbol))
            df.to_pickle(path=out_filename)
            if settings.SHOW_DEBUG:
                print("Saved performance {} to pickle.".format(filename))
        except Exception as e:
            print("At special case performance {}".format(e))


async def perf_point(filename, path_to):
    try:
        if settings.SHOW_DEBUG:
            print("Working with {}".format(filename))
        spl = filename.split('==')
        broker = spl[0]
        symbol = spl[1]
        if settings.SHOW_DEBUG:
            print("Processing {}".format(symbol))
        period = spl[2]
        system = spl[3].split('.')[0]
        try:
            margin = float(Symbols.objects.get(broker__title=broker, \
                symbol=symbol).margin_initial)
        except:
            margin = None
        if settings.SHOW_DEBUG:
            print("Margin: {}".format(margin))

        if settings.SHOW_DEBUG:
            print("Working with {0} {1} {2}".format(symbol, period, system))

        commission = await get_commission(symbol)
        if settings.SHOW_DEBUG:
            print("Commission {}".format(commission))

        if not (commission is None):
            if commission > 0:
                #read data
                df = read_pickle(join(path_to, filename))

                if len(df.index) > settings.MIN_TRADES:

                    df.index = to_datetime(df.index).to_pydatetime()

                    df['dif'] = await adjustment_bureau(data=df['DIFF'], \
                        symbol_name=symbol, broker_name=broker, period_name=period)#.to_frame()
                    if not (df['dif'] is None):
                        del df['DIFF']
                        df.rename(columns={'dif': 'DIFF'}, inplace=True)

                        if system is 'HOLD':
                            df['LONG_PL'] = where(df['BUY_SIDE'] == 1, df['DIFF'], 0.0)
                            df['SHORT_PL'] = where(df['SELL_SIDE'] == -1, -df['DIFF'], 0.0)

                            df['LONG_TRADES'] = 0
                            df['SHORT_TRADES'] = 0
                        else:
                            df['commissions_long'] = where((df['BUY_SIDE'].shift() == 1) & (df['BUY_SIDE'].shift(2) == 0), commission*2.0, 0)
                            df['commissions_short'] = where((df['SELL_SIDE'].shift() == -1) & (df['SELL_SIDE'].shift(2) == 0), commission*2.0, 0)

                            df['LONG_TRADES'] = where((df['BUY_SIDE'].shift() == 1) & (df['BUY_SIDE'].shift(2) == 0), 1, 0)
                            df['SHORT_TRADES'] = where((df['SELL_SIDE'].shift() == -1) & (df['SELL_SIDE'].shift(2) == 0), 1, 0)

                            df['LONG_PL'] = where(df['BUY_SIDE'].shift() == 1, df['DIFF'] - df['commissions_long'], 0)
                            df['SHORT_PL'] = where(df['SELL_SIDE'].shift() == -1, -df['DIFF'] - df['commissions_long'], 0)

                            df['LONG_MARGIN'] = where(df['BUY_SIDE'].shift() == 1, margin, 0.0)
                            df['SHORT_MARGIN'] = where(df['SELL_SIDE'].shift() == -1, margin, 0.0)

                            del df['commissions_long']
                            del df['commissions_short']

                        df['LONG_PL_CUMSUM'] = df['LONG_PL'].cumsum()
                        df['SHORT_PL_CUMSUM'] = df['SHORT_PL'].cumsum()

                        df['mae'] = await adjustment_bureau(data=df['cl'], symbol_name=symbol, broker_name=broker, period_name=period)
                        #df['mae'] = df['cl']
                        df['mfe'] = await adjustment_bureau(data=df['hc'], symbol_name=symbol, broker_name=broker, period_name=period)
                        #df['mfe'] = df['hc']

                        df.rename(columns={'mae': 'MAE', 'mfe': 'MFE'}, inplace=True)
                        del df['cl']
                        del df['hc']

                        if system is 'HOLD':
                            df['LONG_MAE'] = df['LONG_PL_CUMSUM'] - df['MAE']
                            df['LONG_MFE'] = df['LONG_PL_CUMSUM'] + df['MFE']
                            df['SHORT_MAE'] = df['SHORT_PL_CUMSUM'] - df['MFE']
                            df['SHORT_MFE'] = df['SHORT_PL_CUMSUM'] + df['MAE']
                        else:
                            df['mae_tmp_long'] = where(df['BUY_SIDE'].shift() == 1, df['MAE'], 0.0)
                            df['mfe_tmp_long'] = where(df['BUY_SIDE'].shift() == 1, df['MFE'], 0.0)
                            df['mae_tmp_short'] = where(df['SELL_SIDE'].shift() == -1, df['MFE'], 0.0)
                            df['mfe_tmp_short'] = where(df['SELL_SIDE'].shift() == -1, df['MAE'], 0.0)

                            df['LONG_MAE'] = df['LONG_PL_CUMSUM'] - df['mae_tmp_long']
                            df['LONG_MFE'] = df['LONG_PL_CUMSUM'] + df['mfe_tmp_long']
                            df['SHORT_MAE'] = df['SHORT_PL_CUMSUM'] - df['mfe_tmp_short']
                            df['SHORT_MFE'] = df['SHORT_PL_CUMSUM'] + df['mae_tmp_short']

                        df['LONG_DIFF_CUMSUM'] = df['DIFF'].cumsum()
                        df['SHORT_DIFF_CUMSUM'] = -df['DIFF'].cumsum()

                        df = df.dropna()

                        del df['mae_tmp_long']
                        del df['mfe_tmp_long']
                        del df['mae_tmp_short']
                        del df['mfe_tmp_short']

                        out_filename = join(settings.DATA_PATH, 'performance', "{0}=={1}=={2}=={3}.mp".format(broker, symbol, period, system))
                        df.to_pickle(path=out_filename)
                        if settings.SHOW_DEBUG:
                            print("Saved performance {} to pickle.".format(filename))
            else:
                try:
                    folders = ['performance', 'systems']
                    for folder in folders:
                        out_filename = join(settings.DATA_PATH, folder, "{0}=={1}=={2}=={3}.mp".format(broker, symbol, period, system))
                        await file_cleaner(filename=out_filename)
                    #await symbol_cleaner(symbol=symbol, broker=broker)
                    print("Cleaned due to empty commissions.")
                except Exception as e:
                    if settings.SHOW_DEBUG:
                        print(e)
                    pass
        else:
            try:
                folders = ['performance', 'systems']
                for folder in folders:
                    out_filename = join(settings.DATA_PATH, folder, "{0}=={1}=={2}=={3}.mp".format(broker, symbol, period, system))
                    await file_cleaner(filename=out_filename)
                await file_cleaner(filename=out_filename)
                if settings.SHOW_DEBUG:
                    print("Cleaned due to empty commissions.")
            except Exception as e:
                if settings.SHOW_DEBUG:
                    print("At generate performance cleaning {}".format(e))
                pass
    except Exception as e:
        print(colored.red("At generating performance {0} with {1}".format(e, filename)))
        if settings.SHOW_DEBUG:
            print(df.tail())


def generate_performance(loop):
    path_to = join(settings.DATA_PATH, 'systems')

    #clean_folder(path_to='performance')
    filenames = [f for f in listdir(path_to) if isfile(join(path_to, f))]

    loop.run_until_complete(asyncio.gather(*[perf_point(filename=filename, path_to=path_to) \
        for filename in filenames if 'M1' not in filename], return_exceptions=True
    ))

    #special cases
    periods = ['1440', '10080', '43200']
    loop.run_until_complete(asyncio.gather(*[special_case(path_to=path_to, period=period) \
        for period in periods], return_exceptions=True
    ))


class SignalBase:
    def __init__(self, name, description, indicator, mean_rev, buy_threshold, sell_threshold):
        self.name = name
        self.indicator = Indicators.objects.get(title=indicator)
        self.description = description
        self.mean_rev = mean_rev
        self.buy_threshold = buy_threshold
        self.sell_threshold = sell_threshold
        self.path_to_history = join(settings.DATA_PATH, 'indicators')
        self.excluded_symbols = ['M1']

    async def create_system(self):
        try:
            system = Systems.objects.create(title=self.name, indicator=self.indicator)
            system.save()
            print("Created system.")
        except IntegrityError:
            pass
        except Exception as e:
            print("At create_system(): {0}".format(e))
            if settings.UPDATE_DESCRIPTIONS:
                system = Systems.objects.get(title=self.name)
                system.description=self.description
                system.indicator=self.indicator
                system.save()
            pass

    async def clean_df(self, df):
        del df['VALUE']
        return df

    async def starter(self):
        await self.create_system()

        #clean_folder(path_to='systems')
        filenames = [f for f in listdir(self.path_to_history) if isfile(join(self.path_to_history, f))]

        for filename in filenames:
            spl = filename.split('==')

            if spl[3].split('.')[0] == str(self.indicator):
                self.broker = spl[0]
                self.symbol = spl[1]
                self.period = spl[2]

                #FIXME shit doesn't work, tired to think why
                #if not (self.system == any(s in self.symbol for s in self.excluded_symbols)):
                #read data
                df = read_pickle(join(self.path_to_history, filename))

                #make index
                #df.index = to_datetime(df.index).to_pydatetime()

                await self.signals(df)

    async def insert(self, df):
        try:
            df = df.dropna()

            filename = join(settings.DATA_PATH, 'systems', "{0}=={1}=={2}=={3}.mp".format(self.broker, self.symbol, self.period, self.name) )
            df.to_pickle(path=filename)
            if settings.SHOW_DEBUG:
                print("Saved system signals {} to pickle.".format(filename))
        except Exception as e:
            print(e)
            filename = join(settings.DATA_PATH, 'systems', "{0}=={1}=={2}=={3}.mp".format(self.broker, self.symbol, self.period, self.name) )
            await file_cleaner(filename=filename)

    async def signals(self, df):
        try:
            if settings.SHOW_DEBUG:
                print("Working with {0} {1} {2}".format(self.symbol, self.period, self.name))
            if 'SM' in self.name:
                if self.mean_rev:
                    df['BUY_SIDE'] = where(df['VALUE'].shift() < 0.0, 1, 0)
                    df['SELL_SIDE'] = where(df['VALUE'].shift() > 0.0, -1, 0)
                else:
                    df['BUY_SIDE'] = where(df['VALUE'].shift() > 0.0, 1, 0)
                    df['SELL_SIDE'] = where(df['VALUE'].shift() < 0.0, -1, 0)
                df = await self.clean_df(df=df)
                await self.insert(df.dropna())
        except Exception as e:
            if settings.SHOW_DEBUG:
                print("At making signals {0} with {1} {2}".format(e, self.name, self.symbol))
